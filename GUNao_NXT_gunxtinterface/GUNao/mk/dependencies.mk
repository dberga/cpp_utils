#	$Id$
#
# A make file for modelling module dependencies
#
.if !defined(DEPENDENCIES_MK)
DEPENDENCIES_MK=1

BIN_PROVIDES?=${BIN}.provides
BIN_REQUIRES?=${BIN}.requires
BIN_UNRESOLVED?=${BIN}.unresolved
BIN_DOT?=${BIN}.dot
ALL_DOT?=${BIN}-all.dot

.include "prefs.mk"

DEPENDENCIES_DIR?=${GUNAO_DIR}/dependencies
DEPENDENCIES_COOKIE=${DEPENDENCIES_DIR}/.cookie
DEPENDENCIES_COOKIE2=${DEPENDENCIES_DIR}/.cookie2

.if !defined(NO_DEFAULT_DEPENDENCIES_TARGETS)
ALL_TARGETS+=show-dependencies
ALL_TARGETS+=show-unresolved
.endif

CLEAN_FILES+=${BIN_DOT}
CLEAN_FILES+=${BIN_DOT:.dot=.pdf}
CLEAN_FILES+=${BIN_UNRESOLVED}

all: all-real		# make sure all is the first target

.SUFFIXES: .wbmsg .fsm
.fsm.wbmsg:
	${SAY} "compiling wb   $*.fsm"
	$Eecho '/*' > $*_submachine_wbmsg.c
	$Eecho '/* automatically generated by dependencies.mk' >> $*_submachine_wbmsg.c
	$Eecho ' * do not modify manually!' >> $*_submachine_wbmsg.c
	$Eecho ' */' >> $*_submachine_wbmsg.c
	$Eecho 'const char *$* = "$*";' >> $*_submachine_wbmsg.c
	$Eecho 'const char *$*IsRunning = "$*IsRunning";' >> $*_submachine_wbmsg.c
	$Etouch $*.wbmsg

.SUFFIXES: .requires .values
.values.requires:
	${SAY} "compiling req  $*.values"
	$E${RM} $*.unresolved.requires
	$Eecho "$*IsRunning" > $*.requires
	$Efor val in `cat $*.values` ; do				\
		found="" ;						\
		if [ -e ${DEPENDENCIES_DIR:Q}/key.$$val ] ; then	\
			cat ${DEPENDENCIES_DIR:Q}/key.$$val		\
				>> $*.requires ;			\
				found=1 ;				\
		else for f in `ls ${DEPENDENCIES_DIR:Q}/provides.*@ 2>/dev/null` ; do \
			m=`echo "$$f" | sed -e 's|.*/provides.||' -e 's|@||'` ;	\
			if echo "$${val}" | grep -q -s "^$$m" ; then	\
				echo "$$m@" >> $*.requires ;		\
				found=2 ;				\
			fi ;						\
		done ; fi ; if [ -z "$$found" ]; then			\
			echo "$$val" >> $*.unresolved.requires ;	\
		fi ;							\
	done
	$Etouch $*.requires

.SUFFIXES: .provides .conditions
.conditions.provides:
	${SAY} "compiling prov $*.conditions"
	$Eecho "$*" > $*.provides
	$Efor val in `cat $*.conditions` ; do				\
		found="" ;						\
		if [ -e ${DEPENDENCIES_DIR:Q}/key.$$val ] ; then	\
			cat ${DEPENDENCIES_DIR:Q}/key.$$val		\
				>> $*.provides ;			\
				found=1 ;				\
		else for f in `ls ${DEPENDENCIES_DIR:Q}/requires.*@ 2>/dev/null` ; do \
			m=`echo "$$f" | sed -e 's|.*/requires.||' -e 's|@||'` ;	\
			if echo "$${val}" | grep -q -s "^$$m" ; then	\
				echo "$$m@" >> $*.provides ;		\
				found=2 ;				\
			fi ;						\
		done ; fi ; if [ -z "$$found" ]; then			\
			echo "$$val" >> $*.unresolved.provides ;	\
		fi ;							\
	done
	$Etouch $*.provides

.SUFFIXES: .dot .requires
.requires.dot:
	${SAY} "compiling dot  $*"
	$E${RM} /tmp/$*.dir.* /tmp/$*.unknown
	$Eecho 'digraph "$* dependencies" {' > $*.dot
	$Efor dep in `sort -u $*.provides ${BIN_PROVIDES:Q}` ; do				\
		if [ -e ${DEPENDENCIES_DIR:Q}/"requires.$${dep}" ]; then \
			for prov in `cat ${DEPENDENCIES_DIR:Q}/"requires.$${dep}"` ; do \
				bprov=`basename $$prov` ;		\
				echo >> $*.dot "	$$bprov"	\
					'[shape=box,label="'"$$bprov"'"]' ;\
				echo >> $*.dot "	$$bprov -> $*"	\
					'[color="#009900",label="'"$$dep"'"];' ;	\
				for dprov in `dirname "$$prov" | rev | tr '/' '\n' | rev` ; do \
					echo >> $*.dot "	$$dprov"	\
						'[color=blue,fontcolor=blue]' ;	\
					echo > /tmp/$*.dir.$$bprov "	$$bprov -> $$dprov" \
						'[color=blue,style=dashed]' ;	\
					bprov="$$dprov" ;		\
				done ;					\
			done ;						\
		fi ;							\
	done
	$Eecho '' >> $*.dot
	$Eif [ -e $*.unresolved.provides ] ; then			\
		for dep in `sort -u $*.unresolved.provides` ; do	\
			echo >> $*.dot "	unknown -> $*"		\
					'[label="'"$$dep"'"]' ;		\
			touch /tmp/$*.unknown ;				\
		done ;							\
	fi
	$Eecho '' >> $*.dot
	$Eecho '	$* [shape=box];' >> $*.dot
	$Eecho '' >> $*.dot
	$Efor dep in `sort -u $*.requires ${BIN_REQUIRES:Q}` ; do	\
		if [ -e ${DEPENDENCIES_DIR:Q}/"provides.$${dep}" ]; then \
			for prov in `cat ${DEPENDENCIES_DIR:Q}/"provides.$${dep}"` ; do \
				bprov=`basename $$prov` ;		\
				echo >> $*.dot "	$$bprov"	\
					'[shape=box,label="'"$$bprov"'"]' ;\
				bp="$$bprov" ;				\
				for dprov in `dirname "$$prov" | rev | tr '/' '\n' | rev` ; do \
					echo >> $*.dot "	$$dprov"	\
						'[color=blue,fontcolor=blue]' ;	\
					echo > /tmp/$*.dir.$$bp "	$$bp -> $$dprov" \
						'[color=blue,style=dashed]' ;	\
					bp="$$dprov" ;		\
				done ;					\
				echo >> $*.dot "	$* -> $$bprov"	\
					'[label="'"$$dep"'"];' ;	\
			done ;						\
		fi ;							\
	done
	$Eif [ -e $*.unresolved.requires ] ; then				\
		for dep in `sort -u $*.unresolved.requires` ; do		\
			echo >> $*.dot "	$* -> unknown"		\
					'[label="'"$$dep"'"];' ;	\
			touch /tmp/$*.unknown ;				\
		done ;							\
	fi
	$Ecat /tmp/$*.dir.* >> $*.dot 2>/dev/null || true
	$Eif [ -e /tmp/$*.unknown ]; then				\
		echo '	unknown [color=white,fontcolor=red];' >>$*.dot ;\
	fi
	$Eecho '}' >> $*.dot
	$E${RM} /tmp/$*.dir.* /tmp/$*.unknown

${ALL_DOT}: ${DEPENDENCIES_COOKIE} ${FSM_REQUIREMENTS} ${FSM_PROVISIONS} ${DEPENDENCIES_COOKIE2}
	${SAY} "compiling dot  ${ALL_DOT}"
	$Eecho 'digraph "${ALL_DOT} dependencies" {' > ${ALL_DOT}
	$Eallmod="" ; for mod in `cat ${DEPENDENCIES_DIR:Q}/provides.*	\
				${DEPENDENCIES_DIR:Q}/requires.*` ; do	\
		if ! echo $$allmod | grep -q -s "^$$mod\$$" ; then	\
			allmod="$$allmod $$mod" ;			\
		fi ;							\
	done ;								\
	alldep="" ;							\
	for dep in `( cd ${DEPENDENCIES_DIR:Q} &&			\
		echo provides.* requires.* ) | sed 's/[a-z]*\.//g'` ; do\
		if ! echo $$alldep | grep -q -s "^$$dep\$$" ; then	\
			alldep="$$alldep $$dep" ;			\
			if [ -e ${DEPENDENCIES_DIR:Q}/"requires.$${dep}" ]; then			\
				for prov in `cat ${DEPENDENCIES_DIR:Q}/"requires.$${dep}"` ; do		\
					bprov="";							\
					for dprov in `dirname "$$prov" | tr '/' ' '` ; do		\
						if ! grep -q -s "	$$dprov .col" ${ALL_DOT} ; then	\
							echo >> ${ALL_DOT} "	$$dprov"		\
								'[color="#DDDD22",fontcolor="#DDDD22"]' ;		\
						fi ;							\
						if [ -n "$$bprov" ] ; then				\
							if ! grep -q -s "	$$bprov -. $$dprov .col" ${ALL_DOT} ; then	\
								echo >> ${ALL_DOT} "	$$bprov -> $$dprov"			\
									'[color="#DDDD22",style=dashed]' ;	\
							fi ;						\
						fi ;							\
						bprov="$$dprov" ;					\
					done ;								\
					dprov=`basename $$prov` ;					\
					if ! grep -q -s "	$$dprov .shape" ${ALL_DOT} ; then	\
						echo   "	$$dprov  (`dirname $$prov`)" ;		\
						if [ -n "$$bprov" ] ; then				\
							if ! grep -q -s "	$$bprov -. $$dprov .col" ${ALL_DOT} ; then	\
								echo >> ${ALL_DOT} "	$$bprov -> $$dprov"			\
									'[color="#DDDD22",style=dashed]' ;	\
							fi ;						\
						fi ;							\
						echo >> ${ALL_DOT} "	$$dprov"			\
							'[shape=box,label="'"$$dprov"'"]' ;		\
					fi ;								\
					if [ -e ${DEPENDENCIES_DIR:Q}/"provides.$${dep}" ]; then			\
						for req in `cat ${DEPENDENCIES_DIR:Q}/"provides.$${dep}"` ; do		\
							breq=`basename $$req` ;						\
							if ! grep -q -s "	$$dprov -. $$breq" ${ALL_DOT} ; then	\
								echo >> ${ALL_DOT} "	$$dprov -> $$breq"		\
									'[color="#009900"];' ;				\
							fi ;								\
							if ! grep -q -s "	$$breq .shape" ${ALL_DOT} ; then	\
								echo   "	$$breq  (`dirname $$req`)" ;		\
								bprov="";									\
								for dreq in `dirname "$$req" | tr '/' ' '` ; do				\
									if ! grep -q -s "	$$dreq .col" ${ALL_DOT} ; then			\
										echo >> ${ALL_DOT} "	$$dreq"				\
											'[color="#DDDD22",fontcolor="#DDDD22"]' ;		\
									fi ;									\
									if [ -n "$$bprov" ] ; then						\
										if ! grep -q -s "	$$bprov -. $$dreq .col" ${ALL_DOT} ;	\
										then								\
											echo >> ${ALL_DOT} "	$$bprov -> $$dreq"		\
												'[color="#DDDD22",style=dashed]' ;		\
										fi ;								\
									fi ;									\
									bprov="$$dreq" ;							\
								done ;										\
								if ! grep -q -s "	$$bprov -. $$breq .col" ${ALL_DOT} ; then		\
									echo >> ${ALL_DOT} "	$$bprov -> $$breq"				\
										'[color="#DDDD22",style=dashed]' ;				\
								fi ;										\
								echo >> ${ALL_DOT} "	$$breq"							\
									'[shape=box,label="'"$$breq"'"]' ;					\
							fi ; 								\
						done ;									\
					else 										\
					    if [ -n "$$SHOW_UNKNOWN" ] ; then						\
						if ! grep -q -s "	$$dprov -. unknown .col" ${ALL_DOT} ; then	\
							echo >> ${ALL_DOT} "	$$dprov -> unknown"			\
								'[color="red",label="'"$$dep"'"];' ;			\
						fi ;									\
						if ! grep -q -s "	unknown .col" ${ALL_DOT} ; then			\
							echo '	unknown [color=white,fontcolor=red];' >>${ALL_DOT} ;	\
						fi ;									\
					    fi ;									\
					fi ;										\
				done ;									\
			fi ;										\
			if [ -n "$$SHOW_UNKNOWN" -a -e ${DEPENDENCIES_DIR:Q}/"provides.$${dep}" ]; then	\
				for req in `sort -u < ${DEPENDENCIES_DIR:Q}/"provides.$${dep}"` ; do	\
					if [ ! -e ${DEPENDENCIES_DIR:Q}/"requires.$${dep}" ]; then	\
						breq=`basename $$req` ;								\
						if ! grep -q -s "	unknown .col" ${ALL_DOT} ; then				\
							echo '	unknown [color=white,fontcolor=red];' >>${ALL_DOT} ;		\
						fi ;										\
						if ! grep -q -s "	unknown -. $$breq .col" ${ALL_DOT} ; then		\
							echo >> ${ALL_DOT} "	unknown -> $$breq"				\
								'[color="red",label="'"$$dep"'"];' ;				\
						fi ;										\
						bprov="";									\
						for dprov in `dirname "$$req" | tr '/' ' '` ; do				\
							if ! grep -q -s "	$$dprov .col" ${ALL_DOT} ; then			\
								echo >> ${ALL_DOT} "	$$dprov"				\
									'[color="#DDDD22",fontcolor="#DDDD22"]' ;				\
							fi ;									\
							if [ -n "$$bprov" ] ; then						\
								if ! grep -q -s "	$$bprov -. $$dprov .col" ${ALL_DOT} ;	\
								then								\
									echo >> ${ALL_DOT} "	$$bprov -> $$dprov"		\
										'[color="#DDDD22",style=dashed]' ;			\
								fi ;								\
							fi ;									\
							bprov="$$dprov" ;							\
						done ;									\
						dprov=`basename $$req` ;						\
						if ! grep -q -s "	$$dprov .shape" ${ALL_DOT} ; then		\
							if [ -n "$$bprov" ] ; then					\
								if ! grep -q -s "	$$bprov -. $$dprov .col" ${ALL_DOT} ; then	\
									echo >> ${ALL_DOT} "	$$bprov -> $$dprov"			\
										'[color="#DDDD22",style=dashed]' ;		\
								fi ;							\
							fi ;								\
							echo >> ${ALL_DOT} "	$$dprov"				\
								'[shape=box,label="'"$$dprov"'"]' ;			\
						fi ;									\
					fi ;								\
				done ;									\
			fi ;										\
		fi ;							\
	done
	$Eecho '}' >> ${ALL_DOT}

show-all-dependencies: ${SUBDIR_TARGETS} ${ALL_DOT:.dot=.pdf}

${DEPENDENCIES_COOKIE}: ${BIN_PROVIDES} ${BIN_REQUIRES} ${FSM_DEPENDENCIES}
	$E${MKDIR} ${DEPENDENCIES_DIR:Q}
	$Ecd ${GUNAO_DIR:Q} && /bin/sh ./mk/dependencies_scanner.sh
	$E${TOUCH} ${DEPENDENCIES_COOKIE:Q}

${DEPENDENCIES_COOKIE2}: ${DEPENDENCIES_COOKIE} ${FSM_REQUIREMENTS} ${FSM_PROVISIONS}
	$Eecho "pass 2 -- ${FSM_REQUIREMENTS} ${FSM_PROVISIONS}:"
	$E${MKDIR} ${DEPENDENCIES_DIR:Q}
	$Ecd ${GUNAO_DIR:Q} && /bin/sh ./mk/dependencies_scanner.sh
	$E${TOUCH} ${DEPENDENCIES_COOKIE2:Q}

.if !target(${BIN_PROVIDES})
${BIN_PROVIDES}:
	$E${TOUCH} ${BIN_PROVIDES}
.endif

.if !target(${BIN_REQUIRES})
${BIN_REQUIRES}:
	$E${TOUCH} ${BIN_REQUIRES}
.endif

${BIN}.dot: ${DEPENDENCIES_COOKIE} ${BIN_PROVIDES} ${BIN_REQUIRES} ${FSM_DEPENDENCIES} ${FSM_REQUIREMENTS} ${FSM_PROVISIONS} ${DEPENDENCIES_COOKIE2}

${BIN}.pdf: ${DEPENDENCIES_COOKIE} ${BIN_PROVIDES} ${BIN_REQUIRES} ${FSM_DEPENDENCIES} ${FSM_REQUIREMENTS} ${FSM_PROVISIONS} ${DEPENDENCIES_COOKIE2}

show-module-dependencies: pre-targets

show-dependencies: ${DEPENDENCIES_COOKIE2} ${BIN}.pdf
	$Eecho "------------------------------------------------------------"
	$Eecho "Modules that may depend on output from ${BIN}:"
	$Eecho "------------------------------------------------------------"
	$E( for dep in `sort -u ${BIN_REQUIRES:Q} ${FSM_REQUIREMENTS}` ; do \
		[ ! -e ${DEPENDENCIES_DIR:Q}/"provides.$${dep}" ] ||	\
		cat ${DEPENDENCIES_DIR:Q}/"provides.$${dep}" ;		\
	done ) | grep -v '${MODULE_RELDIR}$$' | sort -u | sed 's/^/	/'
	$Eecho ""
	$Eecho "------------------------------------------------------------"
	$Eecho "Modules that provide input ${BIN} depends on:"
	$Eecho "------------------------------------------------------------"
	$E( for dep in `sort -u ${BIN_PROVIDES:Q} ${FSM_PROVISIONS}` ; do \
		[ ! -e ${DEPENDENCIES_DIR:Q}/"requires.$${dep}" ] ||	\
		cat ${DEPENDENCIES_DIR:Q}/"requires.$${dep}" ;		\
	done ) | grep -v '${MODULE_RELDIR}$$' | sort -u | sed 's/^/	/'
	$Eecho ""

show-unresolved: ${DEPENDENCIES_COOKIE2} ${BIN}.pdf
	$Eif [ -e ${BIN_UNRESOLVED:Q} ] ; then				\
		echo "============================================================" ; \
		echo "*** Unresolved dependencies for ${BIN}:" ;	\
		sed 's/^/	/' < ${BIN_UNRESOLVED:Q} ;		\
	fi

clean-dependencies:
	${RM} -rf ${DEPENDENCIES_DIR:Q}

.endif # !defined(DEPENDENCIES_MK)
